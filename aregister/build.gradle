apply plugin: 'base'
apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'pmd'

description = """Actor Register"""

dependencies {
    compile project(':aregister-redis')
}

test.testLogging.showStandardStreams = true

//IDE中运行与调试的配置
def runMainClass = 'net.arksea.dsf.register.ServerMain'

//配置在IDE中运行及调试时的参数
task run1(type: JavaExec, dependsOn: 'classes') {
    classpath = sourceSets.test.runtimeClasspath + sourceSets.main.runtimeClasspath
    main = runMainClass
    jvmArgs = ['-Dakka.remote.netty.tcp.port=6501']
    standardInput = System.in
}

task run2(type: JavaExec, dependsOn: 'classes') {
    classpath = sourceSets.test.runtimeClasspath + sourceSets.main.runtimeClasspath
    main = runMainClass
    jvmArgs = ['-Dakka.remote.netty.tcp.port=6502']
    standardInput = System.in
}

task run3(type: JavaExec, dependsOn: 'classes') {
    classpath = sourceSets.test.runtimeClasspath + sourceSets.main.runtimeClasspath
    main = runMainClass
    jvmArgs = ['-Dakka.remote.netty.tcp.port=6503']
    standardInput = System.in
}

task debug1(type: JavaExec, dependsOn: 'classes') {
    classpath = sourceSets.test.runtimeClasspath + sourceSets.main.runtimeClasspath
    main = runMainClass
    jvmArgs = ['-Dakka.remote.netty.tcp.port=6501']
    standardInput = System.in
    debug = true
}

jar {
    manifest {
        attributes 'Main-Class': runMainClass
        attributes "Class-Path": configurations.runtime.collect { 'lib/'+it.getName() }.join(' ')+" config/"
    }
}

pmd {
    toolVersion = '5.1.3'
    ruleSets = [
        'java-basic',
        'java-braces',
        'java-clone',
        'java-design',
        'java-empty',
        'java-finalizers',
        'java-imports',
        'java-migrating',
        'java-sunsecure',
        'java-unnecessary',
        'java-unusedcode'
    ]
}


//拷贝部署文件到指定目录
task publishOnline <<{
    //拷贝前先删除部署目录
    delete('publish/online/lib')
    delete('publish/online/config')
    copy{ //拷贝本项目打包的jar文件
        from 'build/libs/'
        into 'publish/online'
    }
    copy{ //拷贝依赖库
        from configurations.runtime
        into 'publish/online/lib'
    }
    copy{ //拷贝配置文件
        from 'config/'
        into 'publish/online/config'
    }
}
publishOnline.dependsOn(build)

//发布部署文件，并提交到部署SVN
task publishToSvnOnline(type: Exec) {
    commandLine 'cmd', '/c', 'TortoiseProc.exe /command:commit /path:"./publish/online"'
}
publishToSvnOnline.dependsOn(publishOnline)


//拷贝部署文件到指定目录
task publishDEV <<{
    //拷贝前先删除部署目录
    delete('publish/develop/lib')
    delete('publish/develop/config')
    copy{ //拷贝本项目打包的jar文件
        from 'build/libs/'
        into 'publish/develop'
    }
    copy{ //拷贝依赖库
        from configurations.runtime
        into 'publish/develop/lib'
    }
    copy{ //拷贝配置文件
        from 'config/'
        into 'publish/develop/config'
    }
    copy{ //拷贝资源
        from 'build/resources/test/'
        into 'publish/develop/config'
    }
}
publishDEV.dependsOn(build)

//发布部署文件，并提交到部署SVN
task publishToSvnDEV(type: Exec) {
    commandLine 'cmd', '/c', 'TortoiseProc.exe /command:commit /path:"./publish/develop"'
}
publishToSvnDEV.dependsOn(publishDEV)